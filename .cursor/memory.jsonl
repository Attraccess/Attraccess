{"type":"entity","name":"Attraccess API","entityType":"Project","observations":["NestJS application for managing machine and tool access in a Makerspace or FabLab","Uses Swagger for API documentation","Controllers are organized by domain: app, users-and-auth, resources, etc.","Uses TypeORM entities for database models","Users with canManageResources permission can bypass the introduction check when starting a resource usage session"]}
{"type":"entity","name":"Swagger Documentation","entityType":"Feature","observations":["API documentation is generated using NestJS Swagger module","Swagger configuration is set up in main.bootstrap.ts","The preferred approach is using TypeORM entities over custom DTOs for return types","Exception responses should be properly documented for all endpoints"]}
{"type":"entity","name":"Session Notes Feature","entityType":"Feature","observations":["Frontend feature allowing users to add optional notes when starting or ending a resource usage session","Implemented using a modal dialog with a textarea for note input","Uses SessionNotesModal component with modes for start and end session","Backend already supported notes through StartUsageSessionDto and EndUsageSessionDto","Each component has its own dedicated translations directory with language-specific files","The SessionNotesModal is now self-contained within its own directory with translations","Original component has been refactored to follow the project architecture"]}
{"type":"entity","name":"IntroductionHistoryDialog","entityType":"Component","observations":["A modal dialog that displays the history of resource introduction actions","Optimized to use Hero UI components like Card, CardBody, Badge, and Divider","Improved dark mode support with appropriate dark: class variants","Structured the layout and styling to be more consistent with the application's design system","Updated to use Alert component from HeroUI for better semantic representation of actions","Enhanced with color-matched comment cards that reflect the action type (danger/success)","Improved visual hierarchy with nested content structure","Maintains consistent color theming between the alert and its comment card","Refined to use a more subtle design with flat badges instead of solid alerts","Improved layout with better spacing and alignment","Added subtle color accents through card borders instead of full background colors","Enhanced readability with proper text coloring for dark mode","Removed redundant borders to create a cleaner interface","Updated to use Chip components instead of Alerts for a more subtle and modern look","Implemented a subtle left border accent to indicate status (danger/success)","Maintained consistent color theming while reducing visual weight","Simplified the overall design while maintaining clear status indicators","Improved the layout to be more aligned with modern UI patterns","Refactored into multiple self-contained components following a modular architecture","Created separate files for LoadingState, EmptyState, HistoryComment, and HistoryItem components","Implemented a barrel file (index.ts) to export all components","Improved code organization and maintainability","Each component handles a single responsibility"]}
{"type":"entity","name":"IntroductionHistoryDialog Component","entityType":"Component","observations":["Main modal component that displays introduction history","Relies on useIntroductionHistory hook to fetch data","Contains sub-components: HistoryItem, HistoryComment, and EmptyState, each with their own translations","Currently passes transformed API data to HistoryItem component","Has its own translation files (en.ts, de.ts) with some duplicate keys that should be removed"]}
{"type":"entity","name":"HistoryItem Component","entityType":"Component","observations":["Self-contained component with its own translations","Expected props: timestamp, revoked, userName, comment","Has linter error: Badge should use 'danger'/'success' instead of 'red'/'green'","Not passing necessary 't' prop to HistoryComment"]}
{"type":"entity","name":"HistoryComment Component","entityType":"Component","observations":["Self-contained component with its own translations","Uses 'comment' translation key","Currently expects only 'comment' prop but linter shows it still expects 't' prop"]}
{"type":"entity","name":"EmptyState Component","entityType":"Component","observations":["Self-contained component with its own translations","Uses 'noHistory' translation key","Requires no props as it manages its own translations"]}
{"type":"entity","name":"Attraccess Component Architecture","entityType":"Architecture","observations":["Components should be self-contained with their own translations","Each component should have its own directory with translations folder","Translation files should be language-specific (en.ts, de.ts) within the translations folder","Parent components should not pass translation functions to child components","Duplicate translation keys should be avoided across component hierarchies"]}
{"type":"entity","name":"ResourceIntroductionHistoryItem","entityType":"API Type","observations":["Response type from useIntroductionHistory hook","Contains fields: id, action ('revoke' or 'unrevoke'), performedByUserId, comment, createdAt","Also includes performedByUser object with username field","Mapped to HistoryItem component props in IntroductionHistoryDialog"]}
{"type":"entity","name":"Attraccess Frontend Technologies","entityType":"Technology Stack","observations":["React for frontend components","TypeScript for type safety","@heroui/react and @heroui/modal for UI components","date-fns for date formatting","React Query (useQuery) for data fetching","Custom i18n system with useTranslations hook","TailwindCSS for styling with dark mode support"]}
{"type":"entity","name":"Attraccess Coding Style","entityType":"Development Preferences","observations":["Self-contained components with their own translations","Component organization with index.tsx and separate translation files","Directory structure with components in their own folders","Functional components with React hooks","TypeScript interfaces for prop typing","Dark mode support with dark: class variants","Badge component uses semantic colors ('danger'/'success') instead of literal colors ('red'/'green')","Consistent class naming conventions","Components export their prop types"]}
{"type":"entity","name":"HeroUI Pagination Component","entityType":"Component","observations":["Official component from the HeroUI library","Provides pagination functionality with numbered pages","Supports showControls for previous/next buttons","Can customize appearance with classNames","Supports accessibility through getItemAriaLabel"]}
{"type":"entity","name":"Custom Pagination Component","entityType":"Component","observations":["Located at apps/frontend/src/app/resources/introductions/components/Pagination/index.tsx","Displays a text showing current items range","Used CardFooter for layout structure","Supports translations in English and German","Was updated to use HeroUI Pagination","Completely refactored to use HeroUI Pagination directly","Changed API from onNextPage/onPreviousPage to a single onPageChange handler","Parent component updated to use the new API"]}
{"type":"entity","name":"ManageIntroducers Component Refactoring","entityType":"Task","observations":["Split the original component into three smaller components: ManageIntroducers, AddIntroducer, and IntroducersList","Replaced Card-based list with HeroUI Listbox component for better accessibility and semantics","Added confirmation dialog before removing introducers for better user experience","Updated translation files to include new confirmation dialog strings","Maintained all existing functionality while improving UI/UX"]}
{"type":"entity","name":"HeroUI Listbox","entityType":"UI Component","observations":["A component that displays a list of options and allows a user to select one or more of them","Provides better accessibility with keyboard navigation","Supports customization through classNames and itemClasses props","Can display custom content through startContent and endContent props","Used to replace custom Card-based implementation for introducers list"]}
{"type":"entity","name":"API Test Configuration","entityType":"Configuration","observations":["Test commands are split into 'test' for unit tests and 'e2e' for end-to-end tests","Both commands use the same jest.config.ts file","Both commands support passWithNoTests option","Unit tests match pattern '**/*.spec.ts' and exclude '**/*.e2e.spec.ts'","E2E tests match pattern '**/*.e2e.spec.ts'"]}
{"type":"entity","name":"ResourceUsageHistory","entityType":"Component","observations":["Main component for displaying resource usage history","Uses ID-based state management with useMemo for derived data","Shows a table of usage sessions with start time, end time, duration and status","Allows viewing session notes in a modal by clicking on a row"]}
{"type":"entity","name":"UsageNotesModal","entityType":"Component","observations":["Displays start and end notes for a usage session","Shows a loading spinner if session data is not available","Memoized with React.memo for performance optimization","Handles both start notes and optional end notes"]}
{"type":"entity","name":"HistoryTable","entityType":"Component","observations":["Displays usage history data in a table format","Contains memoized sub-components: HistoryTableHeaders and SessionRow","Makes rows clickable to show notes modal","Shows different columns based on user permissions"]}
{"type":"entity","name":"HistoryHeader","entityType":"Component","observations":["Displays the header section of the history component","Shows a title and optional user filter toggle","Memoized to prevent unnecessary re-renders","Conditionally renders user filter based on permissions"]}
{"type":"entity","name":"HistoryPagination","entityType":"Component","observations":["Handles pagination for the history table","Memoized to prevent unnecessary re-renders","Only shown when multiple pages are available","Takes current page and total pages as props"]}
{"type":"entity","name":"Component Structure","entityType":"Concept","observations":["Each component is now in its own file","Each component has its own translation files","Components are organized in a directory structure","Main component imports modular components"]}
{"type":"entity","name":"Component Structure Update","entityType":"Concept","observations":["Each component now has its own file","HistoryTable has been split into HistoryTableHeaders and SessionRow","Each component has its own translations","Main ResourceUsageHistory now imports all separate components","Replaced wrapper components with utility functions to comply with HeroUI's strict requirements","Used functions that return React elements instead of creating wrapper components","Moved translations to utils folder and consolidated them","Maintained file separation but with a different implementation approach"]}
{"type":"relation","from":"Attraccess API","to":"Swagger Documentation","relationType":"includes"}
{"type":"relation","from":"Session Notes Feature","to":"Attraccess API","relationType":"extends"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"HistoryItem Component","relationType":"contains"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"EmptyState Component","relationType":"contains"}
{"type":"relation","from":"HistoryItem Component","to":"HistoryComment Component","relationType":"uses"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"Attraccess Component Architecture","relationType":"follows"}
{"type":"relation","from":"HistoryItem Component","to":"Attraccess Component Architecture","relationType":"follows"}
{"type":"relation","from":"HistoryComment Component","to":"Attraccess Component Architecture","relationType":"follows"}
{"type":"relation","from":"EmptyState Component","to":"Attraccess Component Architecture","relationType":"follows"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"ResourceIntroductionHistoryItem","relationType":"uses"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"Attraccess Frontend Technologies","relationType":"uses"}
{"type":"relation","from":"IntroductionHistoryDialog Component","to":"Attraccess Coding Style","relationType":"follows"}
{"type":"relation","from":"HistoryItem Component","to":"Attraccess Frontend Technologies","relationType":"uses"}
{"type":"relation","from":"HistoryItem Component","to":"Attraccess Coding Style","relationType":"follows"}
{"type":"relation","from":"HistoryComment Component","to":"Attraccess Frontend Technologies","relationType":"uses"}
{"type":"relation","from":"HistoryComment Component","to":"Attraccess Coding Style","relationType":"follows"}
{"type":"relation","from":"EmptyState Component","to":"Attraccess Frontend Technologies","relationType":"uses"}
{"type":"relation","from":"EmptyState Component","to":"Attraccess Coding Style","relationType":"follows"}
{"type":"relation","from":"Attraccess Component Architecture","to":"Attraccess Coding Style","relationType":"defines"}
{"type":"relation","from":"Custom Pagination Component","to":"HeroUI Pagination Component","relationType":"uses"}
{"type":"relation","from":"Custom Pagination Component","relationType":"handles translation with","to":"useTranslations"}
{"type":"relation","from":"ManageIntroducers Component Refactoring","to":"HeroUI Listbox","relationType":"utilizes"}
{"type":"relation","from":"ManageIntroducers Component Refactoring","to":"ManageIntroducers Component Refactoring","relationType":"improves accessibility"}
{"type":"relation","from":"API Test Configuration","to":"Attraccess API","relationType":"configures testing for"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"uses","to":"UsageNotesModal"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"uses","to":"HistoryTable"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"uses","to":"HistoryHeader"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"uses","to":"HistoryPagination"}
{"type":"relation","from":"HistoryTable","relationType":"renders","to":"SessionRow"}
{"type":"relation","from":"HistoryTable","relationType":"renders","to":"HistoryTableHeaders"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"follows","to":"Component Structure"}
{"type":"relation","from":"HistoryTable","relationType":"follows","to":"Component Structure"}
{"type":"relation","from":"HistoryHeader","relationType":"follows","to":"Component Structure"}
{"type":"relation","from":"HistoryPagination","relationType":"follows","to":"Component Structure"}
{"type":"relation","from":"UsageNotesModal","relationType":"follows","to":"Component Structure"}
{"type":"relation","from":"Component Structure Update","relationType":"enhances","to":"Component Structure"}
{"type":"relation","from":"ResourceUsageHistory","relationType":"follows","to":"Component Structure Update"}
{"type":"relation","from":"HistoryTable","relationType":"follows","to":"Component Structure Update"}
{"type":"relation","from":"HistoryTableHeaders","relationType":"follows","to":"Component Structure Update"}
{"type":"relation","from":"SessionRow","relationType":"follows","to":"Component Structure Update"}