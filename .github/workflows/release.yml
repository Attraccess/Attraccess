name: Release

on:
  # Trigger on release creation
  release:
    types: [published]

  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag (e.g. v1.0.0, latest)'
        required: true
        default: 'latest'

# Define environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository | lowercase }}
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  # Enable Docker BuildKit
  DOCKER_BUILDKIT: 1
  # Determine release version
  RELEASE_VERSION: ${{ github.event_name == 'release' && github.event.release.tag_name || github.event.inputs.tag }}

# Define permissions
permissions:
  contents: read
  packages: write

jobs:
  # Build and test to ensure everything is working before release
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm nx run-many --target=lint,typecheck,test,e2e

      - name: Run production build
        run: pnpm nx run-many --target=build --projects=api,frontend --prod

  # Build and push Docker container
  build-push-container:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}

      # Read Node.js version from .nvmrc
      - name: Get Node.js Version
        id: node-version
        run: echo "NODE_VERSION=$(cat .nvmrc | tr -d '[:space:]')" >> $GITHUB_OUTPUT

      # Set execute permissions on build script
      - name: Make build script executable
        run: chmod +x build.sh

      # Build Docker image with secrets support and version tag
      - name: Build and tag Docker image with release version
        run: |
          echo "Building with release version: ${{ env.RELEASE_VERSION }}"
          ./build.sh --nx-token="${{ env.NX_CLOUD_ACCESS_TOKEN }}" --version="${{ env.RELEASE_VERSION }}"

      # Tag and push Docker image to registry
      - name: Tag and push Docker image to registry
        run: |
          # Tag the local image with the registry path
          docker tag attraccess:${{ env.RELEASE_VERSION }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

          # Push the image
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.RELEASE_VERSION }}

  # Optionally add a deployment step
  deploy:
    needs: build-push-container
    runs-on: ubuntu-latest
    # Only deploy on actual releases, not manual workflow runs
    if: github.event_name == 'release'
    steps:
      - name: Deployment notification
        run: echo "Container was built and pushed. Ready for deployment to production."
      # Add deployment steps here when you're ready
      # For example, update k8s manifests, trigger a deployment API, etc.
