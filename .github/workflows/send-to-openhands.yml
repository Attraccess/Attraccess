name: Send Issue to OpenHands AI

on:
  issue_comment:
    types: [created]

jobs:
  send_to_openhands:
    # Secrets for Authentik and OpenHands configuration must be set in repository settings.
    # Required Authentik secrets:
    #   AUTHENTIK_TOKEN_URL (e.g., https://authentik.apps.janjaap.de/application/o/token/)
    #   AUTHENTIK_CLIENT_ID (Client ID of the OAuth2 Provider in Authentik for OpenHands)
    #   AUTHENTIK_SERVICE_ACCOUNT_USERNAME (e.g., github-openhands-issue-action-service-account)
    #   AUTHENTIK_SERVICE_ACCOUNT_TOKEN (Token for the service account)
    # Required OpenHands & Action secrets:
    #   OPENHANDS_API_HOSTNAME (e.g., your OpenHands instance URL)
    #   ALLOWED_TRIGGER_USERS (Comma-separated GitHub usernames, e.g., jappyjan)
    if: |
      secrets.AUTHENTIK_TOKEN_URL != '' &&
      secrets.AUTHENTIK_CLIENT_ID != '' &&
      secrets.AUTHENTIK_SERVICE_ACCOUNT_USERNAME != '' &&
      secrets.AUTHENTIK_SERVICE_ACCOUNT_TOKEN != '' &&
      secrets.OPENHANDS_API_HOSTNAME != '' &&
      secrets.ALLOWED_TRIGGER_USERS != '' &&
      contains(format(',{0},', secrets.ALLOWED_TRIGGER_USERS), format(',{0},', github.event.comment.user.login)) &&
      contains(github.event.comment.body, '@ai')
    runs-on: ubuntu-latest
    steps:
      - name: Get Authentik Access Token
        id: get_token
        env:
          AUTHENTIK_TOKEN_URL: ${{ secrets.AUTHENTIK_TOKEN_URL }}
          AUTHENTIK_CLIENT_ID: ${{ secrets.AUTHENTIK_CLIENT_ID }}
          AUTHENTIK_SERVICE_ACCOUNT_USERNAME: ${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_USERNAME }}
          AUTHENTIK_SERVICE_ACCOUNT_TOKEN: ${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "Attempting to retrieve Authentik access token..."
          ACCESS_TOKEN_RESPONSE=$(curl -s -X POST "${AUTHENTIK_TOKEN_URL}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${AUTHENTIK_CLIENT_ID}" \
            -d "username=${AUTHENTIK_SERVICE_ACCOUNT_USERNAME}" \
            -d "password=${AUTHENTIK_SERVICE_ACCOUNT_TOKEN}")

          echo "Authentik response: $ACCESS_TOKEN_RESPONSE" # Be cautious with logging full response in public repos if it's too verbose or contains sensitive info beyond the token itself
          
          ACCESS_TOKEN=$(echo "${ACCESS_TOKEN_RESPONSE}" | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" == "null" ]; then
            echo "::error::Failed to retrieve access token from Authentik."
            exit 1
          fi
          
          echo "::set-output name=access_token::${ACCESS_TOKEN}"
          echo "Successfully retrieved Authentik access token."

      - name: Send Issue to OpenHands
        needs: get_token
        env:
          AUTHENTIK_ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          OPENHANDS_API_HOSTNAME: ${{ secrets.OPENHANDS_API_HOSTNAME }}
          ALLOWED_TRIGGER_USERS: ${{ secrets.ALLOWED_TRIGGER_USERS }} # For logging
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          COMMENTER_LOGIN: ${{ github.event.comment.user.login }}
        run: |
          echo "Attempting to send issue to OpenHands."
          echo "Triggered by: ${COMMENTER_LOGIN}"
          echo "Allowed users: ${ALLOWED_TRIGGER_USERS}" # For debugging
          echo "OpenHands API Hostname: ${OPENHANDS_API_HOSTNAME}"
          echo "Raw Comment Body: ${{ github.event.comment.body }}"

          COMMENT_BODY_TRIMMED=$(echo "${{ github.event.comment.body }}" | xargs)
          # Convert to lowercase for @ai check, then extract custom instruction from original comment body
          COMMENT_BODY_LOWER=$(echo "${COMMENT_BODY_TRIMMED}" | tr '[:upper:]' '[:lower:]')

          # Define the common issue details part
          # Using a HEREDOC for readability of the multi-line string
          ISSUE_DETAILS_FORMAT=$(cat <<EOF

--- Issue Details ---
Issue Title: %s
Issue Body:
%s
Link to issue: %s
Triggered by GitHub user: %s
EOF
)

          if [ "${COMMENT_BODY_LOWER}" = "@ai" ]; then
            TASK_INSTRUCTION="Please analyze the following GitHub issue and provide a solution or implement the requested feature/task."
          else
            # Remove "@ai " prefix (case-insensitive for @ai, sensitive for space after it)
            # and assign the rest as the task instruction.
            # Using sed to remove the prefix. The (?i) flag makes the match case-insensitive for @ai.
            # This assumes @ai is at the very beginning of the trimmed comment.
            CUSTOM_INSTRUCTION=$(echo "${COMMENT_BODY_TRIMMED}" | sed -E 's/^(?i)@ai[[:space:]]+//')
            # If sed didn't change anything (e.g. @ai was not followed by space, or was not at start),
            # it might mean the trigger condition needs refinement or the comment is malformed.
            # For now, we assume valid trigger and that CUSTOM_INSTRUCTION will contain the user's text.
            # If CUSTOM_INSTRUCTION is empty after sed (e.g. comment was "@ai   "), we might want a fallback.
            # However, the main job 'if' condition `contains(github.event.comment.body, '@ai')` ensures @ai is present.
            if [ -z "${CUSTOM_INSTRUCTION}" ] || [ "${CUSTOM_INSTRUCTION}" = "${COMMENT_BODY_TRIMMED}" ]; then
                # This case might happen if comment is just "@ai" but somehow slipped the first check,
                # or if it's "@ai" with no text after, or if sed failed. Fallback to default.
                TASK_INSTRUCTION="Please analyze the following GitHub issue and provide a solution or implement the requested feature/task. (Note: Custom instruction could not be parsed, using default.)"
            else
                TASK_INSTRUCTION="${CUSTOM_INSTRUCTION}"
            fi
          fi
          
          echo "Determined Task Instruction: ${TASK_INSTRUCTION}"

          # Combine task instruction with issue details
          INITIAL_USER_MSG=$(printf "${TASK_INSTRUCTION}${ISSUE_DETAILS_FORMAT}" \
          "${ISSUE_TITLE}" \
          "${ISSUE_BODY}" \
          "${ISSUE_URL}" \
          "${COMMENTER_LOGIN}")

          JSON_PAYLOAD=$(jq -n --arg msg "$INITIAL_USER_MSG" --arg repo "${{ github.event.repository.full_name }}" \
            '{initial_user_msg: $msg, repository: $repo, git_provider: "github"}')
          
          echo "Payload to send: $JSON_PAYLOAD" # Be cautious with logging full payload if issue body can be very large or sensitive

          curl --fail -s -X POST "${OPENHANDS_API_HOSTNAME}/api/conversations" \
            -H "Authorization: Bearer ${AUTHENTIK_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${JSON_PAYLOAD}"
          
          echo "API call to OpenHands completed."
