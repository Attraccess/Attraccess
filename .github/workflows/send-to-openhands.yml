name: Send Issue to OpenHands AI

on:
  issue_comment:
    types: [created]

jobs:
  send_to_openhands:
    # Secrets for Authentik and OpenHands configuration must be set in repository settings.
    # Required Authentik secrets:
    #   AUTHENTIK_TOKEN_URL (e.g., https://authentik.apps.janjaap.de/application/o/token/)
    #   AUTHENTIK_CLIENT_ID (Client ID of the OAuth2 Provider in Authentik for OpenHands)
    #   AUTHENTIK_SERVICE_ACCOUNT_USERNAME (e.g., github-openhands-issue-action-service-account)
    #   AUTHENTIK_SERVICE_ACCOUNT_TOKEN (Token for the service account)
    # Required OpenHands & Action secrets:
    #   OPENHANDS_API_HOSTNAME (e.g., your OpenHands instance URL)
    #   ALLOWED_TRIGGER_USERS (Comma-separated GitHub usernames, e.g., jappyjan)
    runs-on: ubuntu-latest
    steps:
      - name: Check if user is authorized and comment contains trigger
        id: check_authorization
        env:
          ALLOWED_TRIGGER_USERS: ${{ secrets.ALLOWED_TRIGGER_USERS }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENTER_LOGIN: ${{ github.event.comment.user.login }}
        run: |
          # Check if required secrets are available
          if [[ -z "${{ secrets.AUTHENTIK_TOKEN_URL }}" || \
                -z "${{ secrets.AUTHENTIK_CLIENT_ID }}" || \
                -z "${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_USERNAME }}" || \
                -z "${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_TOKEN }}" || \
                -z "${{ secrets.OPENHANDS_API_HOSTNAME }}" || \
                -z "${ALLOWED_TRIGGER_USERS}" ]]; then
            echo "Required secrets are not configured. Skipping workflow."
            echo "authorized=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check if comment contains @ai trigger
          if [[ ! "${COMMENT_BODY}" == *"@ai"* ]]; then
            echo "Comment does not contain @ai trigger. Skipping workflow."
            echo "authorized=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check if user is in allowed list
          if [[ ",${ALLOWED_TRIGGER_USERS}," == *",${COMMENTER_LOGIN},"* ]]; then
            echo "User ${COMMENTER_LOGIN} is authorized to trigger this workflow."
            echo "authorized=true" >> "$GITHUB_OUTPUT"
          else
            echo "User ${COMMENTER_LOGIN} is not authorized to trigger this workflow."
            echo "authorized=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Get Authentik Access Token
        if: steps.check_authorization.outputs.authorized == 'true'
        id: get_token
        env:
          AUTHENTIK_TOKEN_URL: ${{ secrets.AUTHENTIK_TOKEN_URL }}
          AUTHENTIK_CLIENT_ID: ${{ secrets.AUTHENTIK_CLIENT_ID }}
          AUTHENTIK_SERVICE_ACCOUNT_USERNAME: ${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_USERNAME }}
          AUTHENTIK_SERVICE_ACCOUNT_TOKEN: ${{ secrets.AUTHENTIK_SERVICE_ACCOUNT_TOKEN }}
        run: |
          echo "Attempting to retrieve Authentik access token..."

          # Use curl with proper error handling
          if ! ACCESS_TOKEN_RESPONSE=$(curl -s -L -w "%{http_code}" -X POST "${AUTHENTIK_TOKEN_URL}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -d "client_id=${AUTHENTIK_CLIENT_ID}" \
            -d "username=${AUTHENTIK_SERVICE_ACCOUNT_USERNAME}" \
            -d "password=${AUTHENTIK_SERVICE_ACCOUNT_TOKEN}"); then
            echo "::error::Failed to make request to Authentik token endpoint."
            exit 1
          fi

          # Extract HTTP status code and response body
          HTTP_CODE="${ACCESS_TOKEN_RESPONSE: -3}"
          RESPONSE_BODY="${ACCESS_TOKEN_RESPONSE%???}"

          if [[ "${HTTP_CODE}" != "200" ]]; then
            echo "::error::Authentik token request failed with HTTP ${HTTP_CODE}"
            exit 1
          fi

          # Extract access token safely
          if ! ACCESS_TOKEN=$(echo "${RESPONSE_BODY}" | jq -r '.access_token // empty'); then
            echo "::error::Failed to parse JSON response from Authentik."
            exit 1
          fi

          if [[ -z "${ACCESS_TOKEN}" ]]; then
            echo "::error::Failed to retrieve access token from Authentik response."
            exit 1
          fi

          echo "access_token=${ACCESS_TOKEN}" >> "$GITHUB_OUTPUT"
          echo "Successfully retrieved Authentik access token."

      - name: Send Issue to OpenHands
        if: steps.check_authorization.outputs.authorized == 'true'
        env:
          AUTHENTIK_ACCESS_TOKEN: ${{ steps.get_token.outputs.access_token }}
          OPENHANDS_API_HOSTNAME: ${{ secrets.OPENHANDS_API_HOSTNAME }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_URL: ${{ github.event.issue.html_url }}
          COMMENTER_LOGIN: ${{ github.event.comment.user.login }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          REPOSITORY_FULL_NAME: ${{ github.event.repository.full_name }}
        run: |
          echo "Attempting to send issue to OpenHands."
          echo "Triggered by: ${COMMENTER_LOGIN}"
          echo "OpenHands API Hostname: ${OPENHANDS_API_HOSTNAME}"

          # Safely process comment body to extract custom instruction
          COMMENT_BODY_TRIMMED=$(echo "${COMMENT_BODY}" | xargs)
          COMMENT_BODY_LOWER=$(echo "${COMMENT_BODY_TRIMMED}" | tr '[:upper:]' '[:lower:]')

          if [[ "${COMMENT_BODY_LOWER}" == "@ai" ]]; then
            TASK_INSTRUCTION="Please analyze the following GitHub issue and provide a solution or implement the requested feature/task."
          else
            # Remove @ai prefix (case-insensitive) and extract custom instruction
            CUSTOM_INSTRUCTION=$(echo "${COMMENT_BODY_TRIMMED}" | sed -E 's/^[[:space:]]*@[Aa][Ii][[:space:]]+//')
            
            if [[ -z "${CUSTOM_INSTRUCTION}" || "${CUSTOM_INSTRUCTION}" == "${COMMENT_BODY_TRIMMED}" ]]; then
                TASK_INSTRUCTION="Please analyze the following GitHub issue and provide a solution or implement the requested feature/task. (Note: Custom instruction could not be parsed, using default.)"
            else
                TASK_INSTRUCTION="${CUSTOM_INSTRUCTION}"
            fi
          fi

          echo "Task instruction determined successfully."

          # Create the complete message using jq to properly escape all content
          INITIAL_USER_MSG=$(jq -n \
            --arg task "${TASK_INSTRUCTION}" \
            --arg title "${ISSUE_TITLE}" \
            --arg body "${ISSUE_BODY}" \
            --arg url "${ISSUE_URL}" \
            --arg user "${COMMENTER_LOGIN}" \
            '$task + "\n\n--- Issue Details ---\nIssue Title: " + $title + "\nIssue Body:\n" + $body + "\nLink to issue: " + $url + "\nTriggered by GitHub user: " + $user')

          # Create JSON payload safely
          JSON_PAYLOAD=$(jq -n \
            --argjson msg "${INITIAL_USER_MSG}" \
            --arg repo "${REPOSITORY_FULL_NAME}" \
            '{initial_user_msg: $msg, repository: $repo, git_provider: "github"}')

          echo "Sending request to OpenHands API..."

          # Make API call with proper error handling
          if ! RESPONSE=$(curl -s -L -w "%{http_code}" -X POST "${OPENHANDS_API_HOSTNAME}/api/conversations" \
            -H "Authorization: Bearer ${AUTHENTIK_ACCESS_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "${JSON_PAYLOAD}"); then
            echo "::error::Failed to make request to OpenHands API."
            exit 1
          fi

          # Extract HTTP status code
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"

          if [[ "${HTTP_CODE}" =~ ^2[0-9][0-9]$ ]]; then
            echo "API call to OpenHands completed successfully (HTTP ${HTTP_CODE})."
          else
            echo "::error::OpenHands API request failed with HTTP ${HTTP_CODE}"
            echo "::error::Response: ${RESPONSE_BODY}"
            exit 1
          fi
