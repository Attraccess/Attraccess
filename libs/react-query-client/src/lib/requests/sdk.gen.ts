// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { AppControllerGetPingData, AppControllerGetPingResponse, UsersControllerGetUsersData, UsersControllerGetUsersResponse, UsersControllerCreateUserData, UsersControllerCreateUserResponse, UsersControllerVerifyEmailData, UsersControllerVerifyEmailResponse, UsersControllerGetMeData, UsersControllerGetMeResponse, UsersControllerGetUserByIdData, UsersControllerGetUserByIdResponse, UsersControllerGetUserByIdError, UsersControllerGetUserPermissionsData, UsersControllerGetUserPermissionsResponse, UsersControllerUpdateUserPermissionsData, UsersControllerUpdateUserPermissionsResponse, UsersControllerBulkUpdateUserPermissionsData, UsersControllerBulkUpdateUserPermissionsResponse, UsersControllerGetUsersWithPermissionData, UsersControllerGetUsersWithPermissionResponse, AuthControllerPostSessionData, AuthControllerPostSessionResponse, AuthControllerDeleteSessionData, AuthControllerDeleteSessionResponse, SsoControllerGetProvidersData, SsoControllerGetProvidersResponse, SsoControllerCreateProviderData, SsoControllerCreateProviderResponse, SsoControllerDeleteProviderData, SsoControllerGetProviderByIdData, SsoControllerGetProviderByIdResponse, SsoControllerUpdateProviderData, SsoControllerUpdateProviderResponse, SsoControllerOidcLoginData, SsoControllerOidcLoginCallbackData, SsoControllerOidcLoginCallbackResponse, ResourcesControllerGetResourcesData, ResourcesControllerGetResourcesResponse, ResourcesControllerCreateResourceData, ResourcesControllerCreateResourceResponse, ResourcesControllerDeleteResourceData, ResourcesControllerDeleteResourceResponse, ResourcesControllerGetResourceByIdData, ResourcesControllerGetResourceByIdResponse, ResourcesControllerUpdateResourceData, ResourcesControllerUpdateResourceResponse, ResourceUsageControllerStartSessionData, ResourceUsageControllerStartSessionResponse, ResourceUsageControllerEndSessionData, ResourceUsageControllerEndSessionResponse, ResourceUsageControllerGetResourceHistoryData, ResourceUsageControllerGetResourceHistoryResponse, ResourceUsageControllerGetActiveSessionData, ResourceUsageControllerGetActiveSessionResponse, ResourceIntroductionControllerCompleteIntroductionData, ResourceIntroductionControllerCompleteIntroductionResponse, ResourceIntroductionControllerGetResourceIntroductionsData, ResourceIntroductionControllerGetResourceIntroductionsResponse, ResourceCheckIntroductionStatusData, ResourceCheckIntroductionStatusResponse, ResourceIntroductionControllerRevokeIntroductionData, ResourceIntroductionControllerRevokeIntroductionResponse, ResourceIntroductionControllerUnrevokeIntroductionData, ResourceIntroductionControllerUnrevokeIntroductionResponse, ResourceIntroductionControllerGetIntroductionHistoryData, ResourceIntroductionControllerGetIntroductionHistoryResponse, ResourceIntroductionControllerCheckIntroductionRevokedStatusData, ResourceIntroductionControllerCheckIntroductionRevokedStatusResponse, ResourceIntroductionControllerGetResourceIntroductionData, ResourceIntroductionControllerGetResourceIntroductionResponse, ResourceIntroductionControllerCanManageIntroductionsData, ResourceIntroductionControllerCanManageIntroductionsResponse, ResourceIntroducersControllerGetResourceIntroducersData, ResourceIntroducersControllerGetResourceIntroducersResponse, ResourceIntroducersControllerRemoveIntroducerData, ResourceIntroducersControllerRemoveIntroducerResponse, ResourceIntroducersControllerAddIntroducerData, ResourceIntroducersControllerAddIntroducerResponse, ResourceIntroducersControllerCanManageIntroducersData, ResourceIntroducersControllerCanManageIntroducersResponse, MqttResourceConfigControllerDeleteMqttConfigData, MqttResourceConfigControllerGetMqttConfigData, MqttResourceConfigControllerGetMqttConfigResponse, MqttResourceConfigControllerCreateOrUpdateMqttConfigData, MqttResourceConfigControllerCreateOrUpdateMqttConfigResponse, MqttResourceConfigControllerTestMqttConfigData, MqttResourceConfigControllerTestMqttConfigResponse, MqttServerControllerGetMqttServersData, MqttServerControllerGetMqttServersResponse, MqttServerControllerCreateMqttServerData, MqttServerControllerCreateMqttServerResponse, MqttServerControllerDeleteMqttServerData, MqttServerControllerGetMqttServerByIdData, MqttServerControllerGetMqttServerByIdResponse, MqttServerControllerUpdateMqttServerData, MqttServerControllerUpdateMqttServerResponse, MqttServerControllerTestMqttServerConnectionData, MqttServerControllerTestMqttServerConnectionResponse, MqttServerControllerGetServerStatusData, MqttServerControllerGetServerStatusResponse, MqttServerControllerGetAllServerStatusesData, MqttServerControllerGetAllServerStatusesResponse, SseControllerStreamEventsData, WebhookConfigControllerFindAllData, WebhookConfigControllerFindAllResponse, WebhookConfigControllerCreateData, WebhookConfigControllerCreateResponse, WebhookConfigControllerDeleteData, WebhookConfigControllerDeleteResponse, WebhookConfigControllerFindByIdData, WebhookConfigControllerFindByIdResponse, WebhookConfigControllerUpdateData, WebhookConfigControllerUpdateResponse, WebhookConfigControllerUpdateStatusData, WebhookConfigControllerUpdateStatusResponse, WebhookConfigControllerTestWebhookData, WebhookConfigControllerTestWebhookResponse, WebhookConfigControllerRegenerateSecretData, WebhookConfigControllerRegenerateSecretResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Check API availability
 */
export const appControllerGetPing = <ThrowOnError extends boolean = false>(options?: Options<AppControllerGetPingData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AppControllerGetPingResponse, unknown, ThrowOnError>({
        url: '/api/ping',
        ...options
    });
};

/**
 * Get a paginated list of users
 */
export const usersControllerGetUsers = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users',
        ...options
    });
};

/**
 * Create a new user
 */
export const usersControllerCreateUser = <ThrowOnError extends boolean = false>(options: Options<UsersControllerCreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerCreateUserResponse, unknown, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Verify a user email address
 */
export const usersControllerVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<UsersControllerVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerVerifyEmailResponse, unknown, ThrowOnError>({
        url: '/api/users/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the current authenticated user
 */
export const usersControllerGetMe = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetMeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/me',
        ...options
    });
};

/**
 * Get a user by ID
 */
export const usersControllerGetUserById = <ThrowOnError extends boolean = false>(options: Options<UsersControllerGetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersControllerGetUserByIdResponse, UsersControllerGetUserByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Get a user's system permissions
 */
export const usersControllerGetUserPermissions = <ThrowOnError extends boolean = false>(options: Options<UsersControllerGetUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersControllerGetUserPermissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/permissions',
        ...options
    });
};

/**
 * Update a user's system permissions
 */
export const usersControllerUpdateUserPermissions = <ThrowOnError extends boolean = false>(options: Options<UsersControllerUpdateUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersControllerUpdateUserPermissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/{id}/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Bulk update user permissions
 */
export const usersControllerBulkUpdateUserPermissions = <ThrowOnError extends boolean = false>(options: Options<UsersControllerBulkUpdateUserPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersControllerBulkUpdateUserPermissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get users with a specific permission
 */
export const usersControllerGetUsersWithPermission = <ThrowOnError extends boolean = false>(options?: Options<UsersControllerGetUsersWithPermissionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersControllerGetUsersWithPermissionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/users/with-permission',
        ...options
    });
};

/**
 * Create a new session using local authentication
 */
export const authControllerPostSession = <ThrowOnError extends boolean = false>(options: Options<AuthControllerPostSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthControllerPostSessionResponse, unknown, ThrowOnError>({
        url: '/api/auth/session/local',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Logout and invalidate the current session
 */
export const authControllerDeleteSession = <ThrowOnError extends boolean = false>(options?: Options<AuthControllerDeleteSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<AuthControllerDeleteSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/session',
        ...options
    });
};

/**
 * Get all SSO providers
 */
export const ssoControllerGetProviders = <ThrowOnError extends boolean = false>(options?: Options<SsoControllerGetProvidersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SsoControllerGetProvidersResponse, unknown, ThrowOnError>({
        url: '/api/auth/sso/providers',
        ...options
    });
};

/**
 * Create a new SSO provider
 */
export const ssoControllerCreateProvider = <ThrowOnError extends boolean = false>(options: Options<SsoControllerCreateProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SsoControllerCreateProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/sso/providers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an SSO provider
 */
export const ssoControllerDeleteProvider = <ThrowOnError extends boolean = false>(options: Options<SsoControllerDeleteProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/sso/providers/{id}',
        ...options
    });
};

/**
 * Get SSO provider by ID with full configuration
 */
export const ssoControllerGetProviderById = <ThrowOnError extends boolean = false>(options: Options<SsoControllerGetProviderByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoControllerGetProviderByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/sso/providers/{id}',
        ...options
    });
};

/**
 * Update an existing SSO provider
 */
export const ssoControllerUpdateProvider = <ThrowOnError extends boolean = false>(options: Options<SsoControllerUpdateProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SsoControllerUpdateProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/auth/sso/providers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Login with OIDC
 * Login with OIDC and redirect to the callback URL (optional), if you intend to redirect to your frontned, your frontend should pass the query parameters back to the sso callback endpoint to retreive a JWT token for furhter authentication
 */
export const ssoControllerOidcLogin = <ThrowOnError extends boolean = false>(options: Options<SsoControllerOidcLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/auth/sso/OIDC/{providerId}/login',
        ...options
    });
};

/**
 * Callback for OIDC login
 */
export const ssoControllerOidcLoginCallback = <ThrowOnError extends boolean = false>(options: Options<SsoControllerOidcLoginCallbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SsoControllerOidcLoginCallbackResponse, unknown, ThrowOnError>({
        url: '/api/auth/sso/OIDC/{providerId}/callback',
        ...options
    });
};

/**
 * Get all resources
 */
export const resourcesControllerGetResources = <ThrowOnError extends boolean = false>(options?: Options<ResourcesControllerGetResourcesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ResourcesControllerGetResourcesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources',
        ...options
    });
};

/**
 * Create a new resource
 */
export const resourcesControllerCreateResource = <ThrowOnError extends boolean = false>(options: Options<ResourcesControllerCreateResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourcesControllerCreateResourceResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete a resource
 */
export const resourcesControllerDeleteResource = <ThrowOnError extends boolean = false>(options: Options<ResourcesControllerDeleteResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResourcesControllerDeleteResourceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{id}',
        ...options
    });
};

/**
 * Get a resource by ID
 */
export const resourcesControllerGetResourceById = <ThrowOnError extends boolean = false>(options: Options<ResourcesControllerGetResourceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourcesControllerGetResourceByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{id}',
        ...options
    });
};

/**
 * Update a resource
 */
export const resourcesControllerUpdateResource = <ThrowOnError extends boolean = false>(options: Options<ResourcesControllerUpdateResourceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ResourcesControllerUpdateResourceResponse, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{id}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Start a resource usage session
 */
export const resourceUsageControllerStartSession = <ThrowOnError extends boolean = false>(options: Options<ResourceUsageControllerStartSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceUsageControllerStartSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/usage/start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * End a resource usage session
 */
export const resourceUsageControllerEndSession = <ThrowOnError extends boolean = false>(options: Options<ResourceUsageControllerEndSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ResourceUsageControllerEndSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/usage/end',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get usage history for a resource
 */
export const resourceUsageControllerGetResourceHistory = <ThrowOnError extends boolean = false>(options: Options<ResourceUsageControllerGetResourceHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceUsageControllerGetResourceHistoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/usage/history',
        ...options
    });
};

/**
 * Get active usage session for current user
 */
export const resourceUsageControllerGetActiveSession = <ThrowOnError extends boolean = false>(options: Options<ResourceUsageControllerGetActiveSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceUsageControllerGetActiveSessionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/usage/active',
        ...options
    });
};

/**
 * Mark resource introduction as completed for a user
 * Complete an introduction for a user identified by their user ID, username, or email.
 */
export const resourceIntroductionControllerCompleteIntroduction = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerCompleteIntroductionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceIntroductionControllerCompleteIntroductionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/complete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all introductions for a resource
 */
export const resourceIntroductionControllerGetResourceIntroductions = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerGetResourceIntroductionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroductionControllerGetResourceIntroductionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions',
        ...options
    });
};

/**
 * Check if current user has a valid introduction
 * Check if the current user has completed the introduction for this resource and it is not revoked
 */
export const resourceCheckIntroductionStatus = <ThrowOnError extends boolean = false>(options: Options<ResourceCheckIntroductionStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceCheckIntroductionStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/status',
        ...options
    });
};

/**
 * Revoke an introduction
 * Revoke access for a user by marking their introduction as revoked
 */
export const resourceIntroductionControllerRevokeIntroduction = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerRevokeIntroductionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceIntroductionControllerRevokeIntroductionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/{introductionId}/revoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unrevoke an introduction
 * Restore access for a user by unrevoking their introduction
 */
export const resourceIntroductionControllerUnrevokeIntroduction = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerUnrevokeIntroductionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceIntroductionControllerUnrevokeIntroductionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/{introductionId}/unrevoke',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get history for a specific introduction
 * Retrieve the history of revoke/unrevoke actions for an introduction
 */
export const resourceIntroductionControllerGetIntroductionHistory = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerGetIntroductionHistoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroductionControllerGetIntroductionHistoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/{introductionId}/history',
        ...options
    });
};

/**
 * Check if an introduction is revoked
 * Determine if a specific introduction is currently revoked
 */
export const resourceIntroductionControllerCheckIntroductionRevokedStatus = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerCheckIntroductionRevokedStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroductionControllerCheckIntroductionRevokedStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/{introductionId}/revoked',
        ...options
    });
};

/**
 * Get a single resource introduction
 * Retrieve detailed information about a specific introduction
 */
export const resourceIntroductionControllerGetResourceIntroduction = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerGetResourceIntroductionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroductionControllerGetResourceIntroductionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/{introductionId}',
        ...options
    });
};

/**
 * Check if user can manage introductions for the resource
 */
export const resourceIntroductionControllerCanManageIntroductions = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroductionControllerCanManageIntroductionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroductionControllerCanManageIntroductionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introductions/permissions/manage',
        ...options
    });
};

/**
 * Get all authorized introducers for a resource
 */
export const resourceIntroducersControllerGetResourceIntroducers = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroducersControllerGetResourceIntroducersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroducersControllerGetResourceIntroducersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introducers',
        ...options
    });
};

/**
 * Remove a user as an introducer for a resource
 */
export const resourceIntroducersControllerRemoveIntroducer = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroducersControllerRemoveIntroducerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ResourceIntroducersControllerRemoveIntroducerResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introducers/{userId}',
        ...options
    });
};

/**
 * Add a user as an introducer for a resource
 */
export const resourceIntroducersControllerAddIntroducer = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroducersControllerAddIntroducerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResourceIntroducersControllerAddIntroducerResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introducers/{userId}',
        ...options
    });
};

/**
 * Check if the current user can manage introducers for a resource
 */
export const resourceIntroducersControllerCanManageIntroducers = <ThrowOnError extends boolean = false>(options: Options<ResourceIntroducersControllerCanManageIntroducersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResourceIntroducersControllerCanManageIntroducersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/introducers/can-manage',
        ...options
    });
};

/**
 * Delete MQTT configuration for a resource
 */
export const mqttResourceConfigControllerDeleteMqttConfig = <ThrowOnError extends boolean = false>(options: Options<MqttResourceConfigControllerDeleteMqttConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/mqtt/config',
        ...options
    });
};

/**
 * Get MQTT configuration for a resource
 */
export const mqttResourceConfigControllerGetMqttConfig = <ThrowOnError extends boolean = false>(options: Options<MqttResourceConfigControllerGetMqttConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MqttResourceConfigControllerGetMqttConfigResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/mqtt/config',
        ...options
    });
};

/**
 * Create or update MQTT configuration for a resource
 */
export const mqttResourceConfigControllerCreateOrUpdateMqttConfig = <ThrowOnError extends boolean = false>(options: Options<MqttResourceConfigControllerCreateOrUpdateMqttConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MqttResourceConfigControllerCreateOrUpdateMqttConfigResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/mqtt/config',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test MQTT configuration
 */
export const mqttResourceConfigControllerTestMqttConfig = <ThrowOnError extends boolean = false>(options: Options<MqttResourceConfigControllerTestMqttConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MqttResourceConfigControllerTestMqttConfigResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/mqtt/config/test',
        ...options
    });
};

/**
 * Get all MQTT servers
 */
export const mqttServerControllerGetMqttServers = <ThrowOnError extends boolean = false>(options?: Options<MqttServerControllerGetMqttServersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MqttServerControllerGetMqttServersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers',
        ...options
    });
};

/**
 * Create new MQTT server
 */
export const mqttServerControllerCreateMqttServer = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerCreateMqttServerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MqttServerControllerCreateMqttServerResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete MQTT server
 */
export const mqttServerControllerDeleteMqttServer = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerDeleteMqttServerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/{id}',
        ...options
    });
};

/**
 * Get MQTT server by ID
 */
export const mqttServerControllerGetMqttServerById = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerGetMqttServerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MqttServerControllerGetMqttServerByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/{id}',
        ...options
    });
};

/**
 * Update MQTT server
 */
export const mqttServerControllerUpdateMqttServer = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerUpdateMqttServerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MqttServerControllerUpdateMqttServerResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test MQTT server connection
 */
export const mqttServerControllerTestMqttServerConnection = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerTestMqttServerConnectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MqttServerControllerTestMqttServerConnectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/{id}/test',
        ...options
    });
};

/**
 * Get MQTT server connection status and statistics
 */
export const mqttServerControllerGetServerStatus = <ThrowOnError extends boolean = false>(options: Options<MqttServerControllerGetServerStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MqttServerControllerGetServerStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/{id}/status',
        ...options
    });
};

/**
 * Get all MQTT server connection statuses and statistics
 */
export const mqttServerControllerGetAllServerStatuses = <ThrowOnError extends boolean = false>(options?: Options<MqttServerControllerGetAllServerStatusesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MqttServerControllerGetAllServerStatusesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/mqtt/servers/status',
        ...options
    });
};

export const sseControllerStreamEvents = <ThrowOnError extends boolean = false>(options: Options<SseControllerStreamEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/resources/{resourceId}/events',
        ...options
    });
};

/**
 * Get all webhook configurations for a resource
 */
export const webhookConfigControllerFindAll = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerFindAllData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhookConfigControllerFindAllResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks',
        ...options
    });
};

/**
 * Create a new webhook configuration
 *
 * Creates a new webhook configuration for a resource.
 *
 * ## URL Templating
 *
 * The webhook URL can include Handlebars templates that will be replaced with context values when the webhook is triggered.
 *
 * Example: `https://example.com/webhooks/{{id}}/{{event}}`
 *
 * ## Header Templating
 *
 * Header values can include Handlebars templates that will be replaced with context values when the webhook is triggered.
 *
 * Example: `{"Authorization": "Bearer {{user.id}}", "X-Resource-Name": "{{name}}"}`
 *
 * ## Available Template Variables
 *
 * Available template variables for URLs, headers, and payloads:
 * - `id`: Resource ID
 * - `name`: Resource name
 * - `description`: Resource description
 * - `timestamp`: ISO timestamp of the event
 * - `user.id`: ID of the user who triggered the event
 * - `event`: Either "started" or "ended" depending on the resource usage state
 *
 */
export const webhookConfigControllerCreate = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhookConfigControllerCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete webhook configuration
 */
export const webhookConfigControllerDelete = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<WebhookConfigControllerDeleteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}',
        ...options
    });
};

/**
 * Get webhook configuration by ID
 */
export const webhookConfigControllerFindById = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<WebhookConfigControllerFindByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}',
        ...options
    });
};

/**
 * Update webhook configuration
 */
export const webhookConfigControllerUpdate = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<WebhookConfigControllerUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Enable or disable webhook
 */
export const webhookConfigControllerUpdateStatus = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerUpdateStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<WebhookConfigControllerUpdateStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Test webhook
 */
export const webhookConfigControllerTestWebhook = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerTestWebhookData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhookConfigControllerTestWebhookResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}/test',
        ...options
    });
};

/**
 * Regenerate webhook secret
 *
 * When signature verification is enabled, each webhook request includes:
 *
 * 1. A timestamp header (X-Webhook-Timestamp)
 * 2. A signature header (configurable, default: X-Webhook-Signature)
 *
 * To verify the signature:
 * 1. Extract the timestamp from the X-Webhook-Timestamp header
 * 2. Combine the timestamp and payload as "${timestamp}.${payload}"
 * 3. Compute the HMAC-SHA256 signature using your webhook secret
 * 4. Compare the resulting signature with the value in the signature header
 *
 * Example (Node.js):
 * ```javascript
 * const crypto = require('crypto');
 *
 * function verifySignature(payload, timestamp, signature, secret) {
 * const signaturePayload = `${timestamp}.${payload}`;
 * const expectedSignature = crypto
 * .createHmac('sha256', secret)
 * .update(signaturePayload)
 * .digest('hex');
 *
 * return crypto.timingSafeEqual(
 * Buffer.from(signature),
 * Buffer.from(expectedSignature)
 * );
 * }
 * ```
 *
 */
export const webhookConfigControllerRegenerateSecret = <ThrowOnError extends boolean = false>(options: Options<WebhookConfigControllerRegenerateSecretData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WebhookConfigControllerRegenerateSecretResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/resources/{resourceId}/webhooks/{id}/regenerate-secret',
        ...options
    });
};